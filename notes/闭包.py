# 利用闭包返回一个计数器函数，每次调用它返回递增整数
def create_counter():
    count = 0
    def counter():
        nonlocal count # 声明count是非局部变量 
        count += 1
        return count
    return counter


counetr = create_counter()

print(counetr()) # 输出: 1
print(counetr()) # 输出: 2
print(counetr()) # 输出: 3



'''
闭包其实就是一种特殊的函数，它可以记住创建它的外部变量，即使这个外部变量已经被销毁了。

1. 直观定义：一个“带了背包”的函数
你可以把闭包想象成一个特殊的函数。这个函数除了可以执行自己的代码外，还背着一个“背包”。背包里装着它在被创建时所处环境中（外部函数作用域）的变量。

即使创建它的那个环境已经消失了（外部函数已经执行完毕返回了），它依然可以随时打开自己的背包，使用里面的变量。

一句话总结：闭包 = 函数 + 其创建时所引用的环境（自由变量）。

2. 构成闭包的三个条件
一个标准的闭包通常需要满足以下三个条件：

必须有一个内嵌函数（函数内部定义了另一个函数）。

内嵌函数必须引用了外部函数的变量。

外部函数必须返回这个内嵌函数。

当满足这三个条件时，你就创建了一个闭包。
'''